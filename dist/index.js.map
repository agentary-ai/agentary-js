{"version":3,"sources":["../src/runtime/logger.ts","../src/runtime/capabilities.ts","../src/runtime/metrics.ts","../src/runtime/storage.ts","../src/runtime/manifest.ts","../src/runtime/session.ts","../src/tokenizer/index.ts","../src/sampler/index.ts","../src/runtime/flags.ts","../src/index.ts"],"names":["log"],"mappings":"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","file":"index.js","sourcesContent":["export type LogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'silent';\n\nexport type LogRecord = {\n  level: Exclude<LogLevel, 'silent'>;\n  time: number;\n  scope: string;\n  message: string;\n  data?: Record<string, unknown>;\n};\n\nlet currentLevel: LogLevel = 'info';\nlet prettyOutput = true;\nlet customSink: ((r: LogRecord) => void) | null = null;\n\nconst levelOrder: Record<Exclude<LogLevel, 'silent'>, number> = {\n  trace: 10,\n  debug: 20,\n  info: 30,\n  warn: 40,\n  error: 50,\n};\n\nexport function setLogLevel(level: LogLevel): void {\n  currentLevel = level;\n}\n\nexport function setLogPretty(pretty: boolean): void {\n  prettyOutput = pretty;\n}\n\nexport function setLogSink(sink: ((r: LogRecord) => void) | null): void {\n  customSink = sink;\n}\n\nfunction shouldLog(level: Exclude<LogLevel, 'silent'>): boolean {\n  if (currentLevel === 'silent') return false;\n  const threshold = currentLevel === 'trace' ? 10 : currentLevel === 'debug' ? 20 : currentLevel === 'info' ? 30 : currentLevel === 'warn' ? 40 : 50;\n  return levelOrder[level] >= threshold;\n}\n\nfunction consoleSink(rec: LogRecord): void {\n  const ts = new Date(rec.time).toISOString();\n  const lvl = rec.level.toUpperCase().padEnd(5);\n  const base = `${ts} [${lvl}] ${rec.scope}: ${rec.message}`;\n  const safeData = rec.data ? redactData(rec.data) : undefined;\n  if (!prettyOutput) {\n    // Structured JSON\n    const out = { ...rec, data: safeData };\n    // eslint-disable-next-line no-console\n    console.log(JSON.stringify(out));\n    return;\n  }\n  if (safeData) {\n    switch (rec.level) {\n      case 'warn':\n        // eslint-disable-next-line no-console\n        console.warn(base, safeData);\n        break;\n      case 'error':\n        // eslint-disable-next-line no-console\n        console.error(base, safeData);\n        break;\n      default:\n        // eslint-disable-next-line no-console\n        console.log(base, safeData);\n        break;\n    }\n  } else {\n    switch (rec.level) {\n      case 'warn':\n        // eslint-disable-next-line no-console\n        console.warn(base);\n        break;\n      case 'error':\n        // eslint-disable-next-line no-console\n        console.error(base);\n        break;\n      default:\n        // eslint-disable-next-line no-console\n        console.log(base);\n        break;\n    }\n  }\n}\n\nexport function createLogger(scope: string): {\n  trace: (message: string, data?: Record<string, unknown>) => void;\n  debug: (message: string, data?: Record<string, unknown>) => void;\n  info: (message: string, data?: Record<string, unknown>) => void;\n  warn: (message: string, data?: Record<string, unknown>) => void;\n  error: (message: string, data?: Record<string, unknown>) => void;\n} {\n  function emit(level: Exclude<LogLevel, 'silent'>, message: string, data?: Record<string, unknown>): void {\n    if (!shouldLog(level)) return;\n    const rec: LogRecord = { level, time: Date.now(), scope, message, ...(data ? { data } : {}) };\n    if (customSink) {\n      try { customSink(rec); } catch {}\n    } else {\n      consoleSink(rec);\n    }\n  }\n  return {\n    trace: (message, data) => emit('trace', message, data),\n    debug: (message, data) => emit('debug', message, data),\n    info: (message, data) => emit('info', message, data),\n    warn: (message, data) => emit('warn', message, data),\n    error: (message, data) => emit('error', message, data),\n  };\n}\n\n// Simple redaction: drop known sensitive fields, shorten long strings/arrays\nconst SENSITIVE_KEYS = new Set(['prompt', 'system', 'tools', 'inputIds', 'modelBuffers', 'adapters']);\n\nexport function redactData(data: Record<string, unknown>): Record<string, unknown> {\n  const copy: Record<string, unknown> = {};\n  const entries = Object.entries(data);\n  for (const [k, v] of entries) {\n    if (SENSITIVE_KEYS.has(k)) continue;\n    copy[k] = summarize(v);\n  }\n  return copy;\n}\n\nfunction summarize(v: unknown): unknown {\n  if (v == null) return v as undefined;\n  if (typeof v === 'string') return v.length > 200 ? v.slice(0, 200) + '…' : v;\n  if (typeof v === 'number' || typeof v === 'boolean') return v;\n  if (Array.isArray(v)) return v.length > 20 ? `[array ${v.length}]` : v.map(summarize);\n  if (v instanceof ArrayBuffer) return `[arraybuffer ${v.byteLength}]`;\n  if (typeof v === 'object') {\n    const o = v as Record<string, unknown>;\n    const out: Record<string, unknown> = {};\n    let count = 0;\n    for (const key of Object.keys(o)) {\n      if (count++ > 20) { out['…'] = 'truncated'; break; }\n      if (SENSITIVE_KEYS.has(key)) continue;\n      out[key] = summarize(o[key]);\n    }\n    return out;\n  }\n  try { return String(v); } catch { return '[unserializable]'; }\n}\n\n\n","import { createLogger } from './logger';\nconst log = createLogger('capabilities');\n\nexport type CapabilityReport = {\n  webgpu: boolean;\n  webnn: boolean;\n  wasmSimd: boolean;\n  wasmThreads: boolean;\n  crossOriginIsolated: boolean;\n  deviceMemoryGB?: number;\n  battery?: {\n    charging?: boolean;\n    level?: number; // 0..1\n  };\n  maxMemoryBudgetMB: number;\n};\n\nasync function checkWasmFeatures(): Promise<{ wasmSimd: boolean; wasmThreads: boolean }>\n{\n  // Basic feature detection via WebAssembly features\n  const simd = (WebAssembly as any).validate?.(\n    new Uint8Array([\n      0, 97, 115, 109, // magic\n      1, 0, 0, 0, // version\n    ]),\n  );\n  // Not reliable; threads require headers. We check env flags.\n  const threads = typeof SharedArrayBuffer !== 'undefined' && (self as any).crossOriginIsolated === true;\n\n  log.debug('checkWasmFeatures', { simd, threads });\n\n  return { wasmSimd: !!simd, wasmThreads: !!threads };\n}\n\nasync function getBattery(): Promise<{ charging?: boolean; level?: number } | undefined> {\n  try {\n    const nav: any = navigator;\n    if (nav?.getBattery) {\n      const b = await nav.getBattery();\n      return { charging: b.charging, level: b.level };\n    }\n  } catch {}\n  return undefined;\n}\n\nexport async function probeCapabilities(): Promise<CapabilityReport> {\n  const t0 = performance.now();\n  const log = (await import('./logger.js')).createLogger('capabilities');\n  const webgpu = typeof (navigator as any).gpu !== 'undefined';\n  const webnn = typeof (navigator as any).ml !== 'undefined';\n  const { wasmSimd, wasmThreads } = await checkWasmFeatures();\n  const crossOriginIsolated = (self as any).crossOriginIsolated === true;\n  const dm = (navigator as any).deviceMemory; // in GB, not widely supported\n  const battery = await getBattery();\n\n  // Estimate memory budget conservatively\n  const deviceMemoryGB = typeof dm === 'number' ? dm : undefined;\n  const maxMemoryBudgetMB = Math.floor((deviceMemoryGB ?? 4) * 1024 * 0.35);\n\n  const base = {\n    webgpu,\n    webnn,\n    wasmSimd,\n    wasmThreads,\n    crossOriginIsolated,\n    maxMemoryBudgetMB,\n  } as const;\n\n  const report: CapabilityReport = {\n    ...base,\n    ...(typeof deviceMemoryGB === 'number' ? { deviceMemoryGB } : {}),\n    ...(battery ? { battery } : {}),\n  };\n\n  log.info('probe completed', { durationMs: Math.round(performance.now() - t0), ...report });\n\n  return report;\n}\n\nexport type Plan = {\n  engine: 'webgpu' | 'wasm' | 'webnn';\n  quant: 'q4' | 'q5' | 'q8' | 'f16';\n  ctx: number;\n};\n\nexport function planExecution(\n  desiredEngine: 'auto' | 'webgpu' | 'wasm' | 'webnn',\n  desiredCtx: number | undefined,\n  report: CapabilityReport,\n): Plan {\n  const preferGpu = desiredEngine === 'webgpu' || (desiredEngine === 'auto' && report.webgpu);\n  const engine: Plan['engine'] = preferGpu ? 'webgpu' : report.wasmSimd ? 'wasm' : report.webnn ? 'webnn' : 'wasm';\n\n  let quant: Plan['quant'] = engine === 'webgpu' ? 'q4' : 'q4';\n\n  // Context length capping based on memory budget\n  const targetCtx = desiredCtx ?? 4096;\n  const perTokenKVBytes = engine === 'webgpu' ? 2 /* fp16 approx per head params, placeholder */ : 1.5; // MB per 1k tokens placeholder\n  const kvBudgetMB = Math.max(64, Math.floor(report.maxMemoryBudgetMB * 0.5));\n  const ctxFromBudget = Math.max(1024, Math.floor((kvBudgetMB / perTokenKVBytes) * 1000));\n  const ctx = Math.min(targetCtx, ctxFromBudget);\n\n  return { engine, quant, ctx };\n}\n\n\n","type MetricName =\n  | 'capability_probe_ms'\n  | 'model_manifest_fetch_ms'\n  | 'model_total_bytes'\n  | 'model_stream_fetch_ms'\n  | 'warmup_ms'\n  | 'ttfb_ms'\n  | 'tok_per_s'\n  | 'oom_event'\n  | 'engine_used';\n\ntype Metric = { name: MetricName; value: number | string; at: number };\n\nconst metrics: Metric[] = [];\nconst listeners: Array<(m: Metric) => void> = [];\n\nexport function recordMetric(name: MetricName, value: number | string): void {\n  const m: Metric = { name, value, at: performance.now() };\n  metrics.push(m);\n  for (const fn of listeners) fn(m);\n}\n\nexport function onMetric(fn: (m: Metric) => void): () => void {\n  listeners.push(fn);\n  return () => {\n    const idx = listeners.indexOf(fn);\n    if (idx >= 0) listeners.splice(idx, 1);\n  };\n}\n\nexport function getMetrics(): Metric[] {\n  return metrics.slice();\n}\n\n\n","// IndexedDB + Cache Storage helpers\nimport { createLogger } from './logger';\nconst log = createLogger('storage');\n\nexport type CacheEntryMeta = {\n  key: string;\n  size: number;\n  lastAccess: number;\n  sri?: string;\n};\n\nconst DB_NAME = 'agentary-cache-v1';\nconst META_STORE = 'meta';\n\nfunction openDb(): Promise<IDBDatabase> {\n  return new Promise((resolve, reject) => {\n    const req = indexedDB.open(DB_NAME, 1);\n    req.onupgradeneeded = () => {\n      const db = req.result;\n      if (!db.objectStoreNames.contains(META_STORE)) {\n        db.createObjectStore(META_STORE, { keyPath: 'key' });\n      }\n    };\n    req.onsuccess = () => resolve(req.result);\n    req.onerror = () => reject(req.error);\n  });\n}\n\nexport async function putMeta(meta: CacheEntryMeta): Promise<void> {\n  const db = await openDb();\n  await new Promise<void>((resolve, reject) => {\n    const tx = db.transaction(META_STORE, 'readwrite');\n    tx.objectStore(META_STORE).put(meta);\n    tx.oncomplete = () => resolve();\n    tx.onerror = () => reject(tx.error);\n  });\n  log.trace('meta put', { key: meta.key, size: meta.size });\n}\n\nexport async function getMeta(key: string): Promise<CacheEntryMeta | undefined> {\n  const db = await openDb();\n  return new Promise((resolve, reject) => {\n    const tx = db.transaction(META_STORE, 'readonly');\n    const req = tx.objectStore(META_STORE).get(key);\n    req.onsuccess = () => resolve(req.result as any);\n    req.onerror = () => reject(req.error);\n  });\n}\n\nexport async function listMetas(): Promise<CacheEntryMeta[]> {\n  const db = await openDb();\n  return new Promise((resolve, reject) => {\n    const tx = db.transaction(META_STORE, 'readonly');\n    const req = tx.objectStore(META_STORE).getAll();\n    req.onsuccess = () => resolve((req.result as any[]) ?? []);\n    req.onerror = () => reject(req.error);\n  });\n}\n\nexport async function deleteMeta(key: string): Promise<void> {\n  const db = await openDb();\n  await new Promise<void>((resolve, reject) => {\n    const tx = db.transaction(META_STORE, 'readwrite');\n    tx.objectStore(META_STORE).delete(key);\n    tx.oncomplete = () => resolve();\n    tx.onerror = () => reject(tx.error);\n  });\n  log.debug('meta delete', { key });\n}\n\nexport async function ensureCache(): Promise<Cache> {\n  return await caches.open('agentary-model-cache');\n}\n\nexport async function putCache(key: string, response: Response, sri?: string): Promise<void> {\n  const cache = await ensureCache();\n  await cache.put(key, response.clone());\n  const size = Number(response.headers.get('content-length') ?? '0');\n  const meta: CacheEntryMeta = sri !== undefined\n    ? { key, size, lastAccess: Date.now(), sri }\n    : { key, size, lastAccess: Date.now() };\n  await putMeta(meta);\n  log.debug('cache put', { key, size });\n}\n\nexport async function getCache(key: string): Promise<Response | undefined> {\n  const cache = await ensureCache();\n  const res = await cache.match(key);\n  if (res) await putMeta({ ...(await getMeta(key)), key, size: Number(res.headers.get('content-length') ?? '0'), lastAccess: Date.now() } as CacheEntryMeta);\n  log.trace(res ? 'cache hit' : 'cache miss', { key });\n  return res ?? undefined;\n}\n\nexport async function evictLruIfNeeded(maxBytes: number): Promise<void> {\n  const metas = await listMetas();\n  let total = metas.reduce((s, m) => s + (m.size || 0), 0);\n  if (total <= maxBytes) return;\n  metas.sort((a, b) => a.lastAccess - b.lastAccess);\n  const cache = await ensureCache();\n  for (const m of metas) {\n    await cache.delete(m.key);\n    await deleteMeta(m.key);\n    total -= m.size;\n    log.info('evicted', { key: m.key, freed: m.size, totalAfter: total });\n    if (total <= maxBytes) break;\n  }\n}\n\n\n","import { recordMetric } from './metrics';\nimport { getCache, putCache, evictLruIfNeeded } from './storage';\nimport { createLogger } from './logger';\n\nexport type Shard = { url: string; bytes: number; sri?: string };\nexport type Manifest = {\n  modelId: string; // e.g. gguf:q4_0/1.5B\n  tokenizerUrl: string;\n  shards: Shard[];\n  adapters?: { id: string; url: string; bytes: number; sri?: string }[];\n  params: { vocabSize: number; numLayers: number; hiddenSize: number };\n  version: string;\n};\n\nasync function fetchWithSRI(url: string, sri?: string, init?: RequestInit): Promise<Response> {\n  const log = createLogger('manifest');\n  const t0 = performance.now();\n  const reqInit: RequestInit = { cache: 'force-cache', ...(init ?? {}) };\n  if (sri !== undefined) reqInit.integrity = sri;\n  const res = await fetch(url, reqInit);\n  recordMetric('model_stream_fetch_ms', performance.now() - t0);\n  if (!res.ok) throw new Error(`Failed to fetch ${url}: ${res.status}`);\n  log.debug('fetched shard', { url, bytes: Number(res.headers.get('content-length') ?? '0') });\n  return res;\n}\n\nexport async function loadManifest(url: string, init?: RequestInit): Promise<Manifest> {\n  const log = createLogger('manifest');\n  const t0 = performance.now();\n  const res = await fetch(url, { cache: 'no-cache', ...(init ?? {}) });\n  if (!res.ok) throw new Error(`Failed to fetch manifest: ${res.status}`);\n  const manifest = (await res.json()) as Manifest;\n  recordMetric('model_manifest_fetch_ms', performance.now() - t0);\n  recordMetric('model_total_bytes', manifest.shards.reduce((s, x) => s + x.bytes, 0));\n  log.info('loaded manifest', { url, version: manifest.version, shards: manifest.shards.length, totalBytes: manifest.shards.reduce((s, x) => s + x.bytes, 0) });\n  return manifest;\n}\n\nexport async function streamAndCache(url: string, sri?: string, init?: RequestInit): Promise<ArrayBuffer> {\n  const log = createLogger('manifest');\n  // Try cache first\n  const cached = await getCache(url);\n  if (cached) {\n    log.debug('cache hit', { url });\n    return await cached.arrayBuffer();\n  }\n  const res = await fetchWithSRI(url, sri, init);\n  const buf = await res.arrayBuffer();\n  await putCache(url, new Response(buf, { headers: { 'content-length': String(buf.byteLength) } }), sri);\n  log.debug('cache put', { url, bytes: buf.byteLength });\n  return buf;\n}\n\nexport async function ensureCacheBudget(maxBytes: number): Promise<void> {\n  const log = createLogger('manifest');\n  log.debug('ensure cache budget', { maxBytes });\n  await evictLruIfNeeded(maxBytes);\n}\n\n// --- Hugging Face integration ---\n\n/**\n * Resolve a Hugging Face repo spec into a Manifest by consulting the HF tree API\n * and constructing raw file URLs via the `resolve` endpoint.\n *\n * Supported model formats (best-effort):\n * - Single file .gguf\n * - Multiple shard .bin files (matches common sharded patterns)\n */\nexport async function loadHfManifest(repoSpec: string, token?: string): Promise<Manifest> {\n  const log = createLogger('manifest');\n  // Parse formats like:\n  // - hf:owner/repo\n  // - hf:owner/repo@rev\n  // - hf:owner/repo#subfolder\n  // - hf:owner/repo@rev#subfolder\n  let spec = repoSpec;\n  if (spec.startsWith('hf:')) spec = spec.slice(3);\n  if (spec.startsWith('//')) spec = spec.slice(2);\n  \n  const splitHash = spec.split('#');\n  const repoAndRev = (splitHash[0] ?? '').trim();\n  const subfolder = (splitHash[1] ?? '').trim();\n  const [ownerRepo, revision = 'main'] = repoAndRev.split('@');\n\n  if (!ownerRepo || !ownerRepo.includes('/')) throw new Error('Invalid Hugging Face model spec. Expected hf:owner/repo[@rev][#subfolder]');\n\n  const repoId = ownerRepo;\n  const headers: HeadersInit = token ? { Authorization: `Bearer ${token}` } : {};\n  const treeUrl = `https://huggingface.co/api/models/${encodeURIComponent(repoId)}/tree/${encodeURIComponent(revision)}?recursive=1&path=${encodeURIComponent(subfolder)}`;\n\n  const t0 = performance.now();\n  const treeRes = await fetch(treeUrl, { headers, cache: 'no-cache' });\n\n  if (!treeRes.ok) throw new Error(`Failed to query Hugging Face tree: ${treeRes.status}`);\n  const entries = (await treeRes.json()) as Array<{ path: string; size?: number; type: 'file' | 'directory' }>;\n  \n  log.info('treeRes parsed entries', { entriesCount: entries.length, sampleEntries: entries.slice(0, 3) });\n  recordMetric('model_manifest_fetch_ms', performance.now() - t0);\n\n  // Identify candidate model files\n  const files = entries.filter((e) => e.type === 'file').map((e) => ({ path: e.path, size: e.size ?? 0 }));\n  const tokenizer = files.find((f) => /(?:^|\\/)tokenizer\\.json$/i.test(f.path));\n\n  // Prefer .gguf single-file models; otherwise, fall back to .bin shards\n  const ggufFiles = files.filter((f) => f.path.endsWith('.gguf'));\n  let shards: Shard[] = [];\n  if (ggufFiles.length > 0) {\n    shards = ggufFiles.map((f) => ({\n      url: `https://huggingface.co/${repoId}/resolve/${revision}/${f.path}`,\n      bytes: f.size,\n    }));\n  } else {\n    // Match common sharded bin patterns\n    const shardBins = files.filter((f) => /\\.(?:bin|safetensors)$/i.test(f.path));\n    // Try to order deterministically: natural order by path\n    shardBins.sort((a, b) => a.path.localeCompare(b.path, undefined, { numeric: true }));\n    shards = shardBins.map((f) => ({\n      url: `https://huggingface.co/${repoId}/resolve/${revision}/${f.path}`,\n      bytes: f.size,\n    }));\n  }\n\n  if (shards.length === 0) throw new Error('No model files found in the specified Hugging Face repo');\n\n  const totalBytes = shards.reduce((s, x) => s + x.bytes, 0);\n  recordMetric('model_total_bytes', totalBytes);\n  log.info('hf manifest resolved', { repoId, revision, subfolder, shards: shards.length, totalBytes });\n\n  // Minimal params; real values would be read from metadata\n  const manifest: Manifest = {\n    modelId: `hf:${repoId}@${revision}${subfolder ? `#${subfolder}` : ''}`,\n    tokenizerUrl: tokenizer ? `https://huggingface.co/${repoId}/resolve/${revision}/${tokenizer.path}` : '',\n    shards,\n    adapters: [],\n    params: { vocabSize: 0, numLayers: 0, hiddenSize: 0 },\n    version: 'hf-auto-0',\n  };\n\n  log.info('loadHfManifest', { manifest });\n\n  return manifest;\n}\n\n\n","import { type CreateSessionArgs, type GenerateArgs, type Session, type TokenStreamChunk } from '../types/api';\nimport { probeCapabilities, planExecution } from './capabilities';\nimport { loadManifest, streamAndCache, ensureCacheBudget, type Manifest, loadHfManifest } from './manifest';\nimport { recordMetric } from './metrics';\nimport { createLogger } from './logger';\nimport { SimpleWhitespaceTokenizer } from '../tokenizer';\nimport { Sampler, type SamplerOptions } from '../sampler';\n\n\nexport async function createSession(args: CreateSessionArgs): Promise<Session> {\n  const log = createLogger('session');\n\n  log.info('createSession', { args });\n\n  const t0 = performance.now();\n  const report = await probeCapabilities();\n  recordMetric('capability_probe_ms', performance.now() - t0);\n\n  const plan = planExecution(args.engine ?? 'auto', args.ctx, report);\n  log.info('plan', { plan });\n\n  // Resolve manifest from:\n  // - hf:owner/repo[@rev][#subfolder]\n  // - absolute URL to a manifest.json\n  // - fallback to demo hardcoded manifest\n  let manifest: Manifest;\n  try {\n    if (args.model.startsWith('hf:')) {\n      manifest = await loadHfManifest(args.model, args.hfToken);\n    } else if (/^https?:\\/\\//i.test(args.model)) {\n      manifest = await loadManifest(args.model, args.hfToken ? { headers: { Authorization: `Bearer ${args.hfToken}` } } : undefined);\n    } else {\n      // Legacy/demo path\n      manifest = {\n        modelId: 'gguf:q4_0/1.5B',\n        tokenizerUrl: 'https://cdn.example.com/models/q4_0/1.5B/tokenizer.json',\n        shards: [\n          { url: 'https://cdn.example.com/models/q4_0/1.5B/shard1.bin', bytes: 1024 * 1024 * 1024 },\n          { url: 'https://cdn.example.com/models/q4_0/1.5B/shard2.bin', bytes: 1024 * 1024 * 1024 },\n        ],\n        adapters: [],\n        params: { vocabSize: 32000, numLayers: 2, hiddenSize: 512 },\n        version: '0.0.1-demo',\n      };\n    }\n  } catch (e) {\n    log.warn('manifest resolution failed, using demo manifest', { error: (e as any)?.message ?? String(e) });\n    manifest = {\n      modelId: 'gguf:q4_0/1.5B',\n      tokenizerUrl: 'https://cdn.example.com/models/q4_0/1.5B/tokenizer.json',\n      shards: [\n        { url: 'https://cdn.example.com/models/q4_0/1.5B/shard1.bin', bytes: 1024 * 1024 * 1024 },\n        { url: 'https://cdn.example.com/models/q4_0/1.5B/shard2.bin', bytes: 1024 * 1024 * 1024 },\n      ],\n      adapters: [],\n      params: { vocabSize: 32000, numLayers: 2, hiddenSize: 512 },\n      version: '0.0.1-demo',\n    };\n  }\n\n  // Cache budget ~ 2x model size or device budget\n  const budget = Math.min(2 * manifest.shards.reduce((s, x) => s + x.bytes, 0), report.maxMemoryBudgetMB * 1024 * 1024);\n  await ensureCacheBudget(budget);\n  log.debug('budget ensured', { budget });\n\n  // Progressive shard loading\n  const modelBuffers: ArrayBuffer[] = [];\n  // for (const shard of manifest.shards) {\n  //   const buf = await streamAndCache(\n  //     shard.url,\n  //     shard.sri,\n  //     args.hfToken ? { headers: { Authorization: `Bearer ${args.hfToken}` } } : undefined,\n  //   );\n  //   modelBuffers.push(buf);\n  //   log.debug('shard loaded', { url: shard.url, bytes: shard.bytes });\n  //   // Optional: early warm-up once N layers available — skipped in MVP\n  // }\n\n  // Tokenizer — placeholder\n  const tokenizer = new SimpleWhitespaceTokenizer();\n\n  const worker = new Worker(new URL('./worker/inferenceWorker.js', import.meta.url), { type: 'module' });\n  const ready = new Promise<void>((resolve, reject) => {\n    worker.onmessage = (ev) => {\n      const msg = ev.data as any;\n      if (msg?.type === 'ready') resolve();\n    };\n    worker.onerror = (e) => reject(e);\n  });\n  worker.postMessage({ type: 'init', payload: { modelBuffers, plan } });\n  await ready;\n  log.info('worker ready');\n\n  let disposed = false;\n\n  async function* generate(gen: GenerateArgs): AsyncIterable<TokenStreamChunk> {\n    if (disposed) throw new Error('Session disposed');\n\n    const samplerOpts: SamplerOptions = {};\n    if (gen.temperature !== undefined) samplerOpts.temperature = gen.temperature;\n    if (gen.top_p !== undefined) samplerOpts.top_p = gen.top_p;\n    if (gen.top_k !== undefined) samplerOpts.top_k = gen.top_k;\n    if (gen.repetition_penalty !== undefined) samplerOpts.repetition_penalty = gen.repetition_penalty;\n    if (gen.seed !== undefined) samplerOpts.seed = gen.seed;\n    if (gen.deterministic !== undefined) samplerOpts.deterministic = gen.deterministic;\n    const sampler = new Sampler(samplerOpts);\n\n    const inputText = `${gen.system ? gen.system + '\\n' : ''}${gen.prompt ?? ''}`;\n    const inputIds = tokenizer.encode(inputText);\n\n    const queue: TokenStreamChunk[] = [];\n    let done = false;\n    let first = true;\n    const ttfbStart = performance.now();\n\n    const onmessage = (ev: MessageEvent<any>) => {\n      const msg = ev.data;\n      if (msg?.type === 'token') {\n        const chunk: TokenStreamChunk = {\n          tokenId: msg.tokenId,\n          token: tokenizer.decode([msg.tokenId]),\n          isFirst: first,\n          isLast: false,\n          ttfbMs: first ? (performance.now() - ttfbStart) : undefined,\n        } as TokenStreamChunk;\n        if (first && chunk.ttfbMs != null) recordMetric('ttfb_ms', chunk.ttfbMs);\n        first = false;\n        queue.push(chunk);\n      } else if (msg?.type === 'done') {\n        done = true;\n        log.debug('generation done');\n      }\n    };\n\n    const onerror = (e: MessageEvent<any>) => {\n      done = true;\n    };\n\n    worker.addEventListener('message', onmessage);\n    worker.addEventListener('error', onerror as any);\n    worker.postMessage({ type: 'generate', payload: { inputIds, opts: {} } });\n    log.debug('generation started', { inputTokens: inputIds.length });\n\n    try {\n      while (!done || queue.length) {\n        if (queue.length) {\n          yield queue.shift()!;\n        } else {\n          await new Promise((r) => setTimeout(r, 1));\n        }\n      }\n      yield { token: '', tokenId: -1, isFirst: false, isLast: true };\n    } finally {\n      worker.removeEventListener('message', onmessage);\n      worker.removeEventListener('error', onerror as any);\n    }\n  }\n\n  async function dispose(): Promise<void> {\n    if (disposed) return;\n    disposed = true;\n    worker.postMessage({ type: 'dispose' });\n    worker.terminate();\n  }\n\n  const session: Session = { generate, dispose };\n  return session;\n}\n\n\n","export interface Tokenizer {\n  encode(text: string): number[];\n  decode(ids: number[]): string;\n}\n\n// Placeholder simple whitespace tokenizer for MVP wiring\nexport class SimpleWhitespaceTokenizer implements Tokenizer {\n  private vocab: Map<string, number> = new Map();\n  private rev: Map<number, string> = new Map();\n\n  constructor() {\n    // Seed with a few special tokens\n    this.addToken('<BOS>');\n    this.addToken('<EOS>');\n  }\n\n  private addToken(tok: string): number {\n    if (this.vocab.has(tok)) return this.vocab.get(tok)!;\n    const id = this.vocab.size;\n    this.vocab.set(tok, id);\n    this.rev.set(id, tok);\n    return id;\n  }\n\n  encode(text: string): number[] {\n    const parts = text.split(/\\s+/).filter(Boolean);\n    const ids: number[] = [];\n    for (const p of parts) ids.push(this.addToken(p));\n    return ids;\n  }\n\n  decode(ids: number[]): string {\n    return ids.map((i) => this.rev.get(i) ?? '').join(' ');\n  }\n}\n\n\n","export type SamplerOptions = {\n  temperature?: number;\n  top_p?: number;\n  top_k?: number;\n  repetition_penalty?: number;\n  seed?: number;\n  deterministic?: boolean;\n};\n\nexport class Sampler {\n  private prngState: number;\n  private opts: Required<SamplerOptions>;\n  private seen: Map<number, number> = new Map();\n\n  constructor(opts: SamplerOptions = {}) {\n    this.opts = {\n      temperature: opts.temperature ?? 0.7,\n      top_p: opts.top_p ?? 0.9,\n      top_k: opts.top_k ?? 40,\n      repetition_penalty: opts.repetition_penalty ?? 1.05,\n      seed: opts.seed ?? 42,\n      deterministic: opts.deterministic ?? false,\n    };\n    this.prngState = this.opts.seed >>> 0;\n  }\n\n  private rand(): number {\n    // xorshift32\n    let x = this.prngState;\n    x ^= x << 13;\n    x ^= x >> 17;\n    x ^= x << 5;\n    this.prngState = x >>> 0;\n    return (this.prngState & 0xffffffff) / 0x100000000;\n  }\n\n  updateSeen(tokenId: number): void {\n    this.seen.set(tokenId, (this.seen.get(tokenId) ?? 0) + 1);\n  }\n\n  nextToken(logits: Float32Array): number {\n    // Apply repetition penalty\n    const adjusted = new Float32Array(logits.length);\n    for (let i = 0; i < logits.length; i++) {\n      const count = this.seen.get(i) ?? 0;\n      adjusted[i] = logits[i] - Math.log(this.opts.repetition_penalty) * count;\n    }\n\n    // Softmax with temperature\n    const temp = Math.max(1e-5, this.opts.temperature);\n    let maxLogit = -Infinity;\n    for (let i = 0; i < adjusted.length; i++) if (adjusted[i] > maxLogit) maxLogit = adjusted[i];\n    let sum = 0;\n    const probs = new Float32Array(adjusted.length);\n    for (let i = 0; i < adjusted.length; i++) {\n      const v = Math.exp((adjusted[i] - maxLogit) / temp);\n      probs[i] = v;\n      sum += v;\n    }\n    for (let i = 0; i < probs.length; i++) probs[i] /= sum;\n\n    // Top-k\n    const k = Math.min(this.opts.top_k, probs.length);\n    const indices = Array.from(probs.keys());\n    indices.sort((a, b) => probs[b] - probs[a]);\n    const topIdx = indices.slice(0, k);\n\n    // Top-p\n    let cumulative = 0;\n    const nucleus: number[] = [];\n    for (const i of topIdx) {\n      nucleus.push(i);\n      cumulative += probs[i];\n      if (cumulative >= (this.opts.top_p ?? 1)) break;\n    }\n\n    if (this.opts.deterministic) {\n      return nucleus[0] ?? topIdx[0] ?? 0;\n    }\n\n    // Sample\n    let r = this.rand();\n    let acc = 0;\n    for (const i of nucleus) {\n      acc += probs[i];\n      if (r <= acc) return i;\n    }\n    return nucleus[nucleus.length - 1] ?? 0;\n  }\n}\n\n\n","export type FeatureFlags = {\n  enableSpeculativeDecoding: boolean;\n  enableLocalRag: boolean;\n  preferWebGPU: boolean;\n};\n\nconst defaultFlags: FeatureFlags = {\n  enableSpeculativeDecoding: false,\n  enableLocalRag: false,\n  preferWebGPU: true,\n};\n\nlet currentFlags: FeatureFlags = { ...defaultFlags };\n\nexport function setFeatureFlags(flags: Partial<FeatureFlags>): void {\n  currentFlags = { ...currentFlags, ...flags };\n}\n\nexport function getFeatureFlags(): FeatureFlags {\n  return currentFlags;\n}\n\n\n","export { createSession } from './runtime/session.js';\nexport type { CreateSessionArgs, GenerateArgs, TokenStreamChunk, Session } from './types/api';\nexport { setFeatureFlags, getFeatureFlags } from './runtime/flags.js';\nexport { getMetrics, onMetric } from './runtime/metrics.js';\nexport { setLogLevel, setLogPretty, setLogSink } from './runtime/logger.js';\n\n\n"]}
import { DataType } from "@huggingface/transformers";
import { InferenceProviderConfig } from "./provider";
import { DeviceProviderConfig } from "./provider";
export type EngineKind = 'auto' | 'webgpu' | 'wasm' | 'webnn';

export interface WorkerInstance {
  worker: Worker;
  model: DeviceProviderConfig;
  initialized: boolean;
  disposed: boolean;
  inflightId: number;
}

export interface InitArgs {
  config: DeviceProviderConfig;
}

export interface MessageContent {
  type: 'text' | 'tool_use' | 'tool_result';
  content: string;
  toolUseId?: string; // Generated by the tool use step
}

export type MessageRole = 'user' | 'assistant' | 'system' | 'function' | 'tool';

export interface ToolCall {
  id: string;
  type: 'function';
  function: {
    name: string;
    arguments: Record<string, any>;
  };
}

export interface Message {
  role: MessageRole;
  content: string;
  tool_calls?: ToolCall[];
  tool_call_id?: string;
}

export interface Model {
  name: string;
  config: InferenceProviderConfig;
}

export interface Tool {
  type: 'function';
  function: {
    name: string;
    description: string;
    parameters: {
      type: 'object';
      properties: Record<string, any>;
      required: string[];
    };
    implementation?: (...args: any[]) => any;
  };
}

export interface GenerateArgs {
  model: string;
  messages: Message[];
  max_new_tokens?: number;
  tools?: Tool[];
  stop?: string[];
  temperature?: number;
  enable_thinking?: boolean;
  top_p?: number;
  top_k?: number;
  repetition_penalty?: number;
  seed?: number;
  deterministic?: boolean;
}

export type InboundMessageType = 'init' | 'generate' | 'dispose';

export type InboundMessage = {
  type: InboundMessageType;
  requestId: string;
  args?: InitArgs | GenerateArgs;
}

export interface ErrorArgs {
  error: string;
}

export interface DebugArgs {
  message: string;
  data?: unknown;
}

export interface ChunkArgs {
  token: string;
  tokenId: number;
  isFirst: boolean;
  isLast: boolean;
  ttfbMs?: number;
}

export interface ProgressArgs {
  status: string;
  name: string;
  file: string;
  progress: number;
  loaded: number;
  total: number;
}

export type OutboundMessageType = 'chunk' | 'ack' | 'done' | 'error' | 'debug' | 'progress';

export type OutboundMessage = {
  type: OutboundMessageType;
  requestId: string;
  args?: ChunkArgs | ErrorArgs | DebugArgs | ProgressArgs;
}